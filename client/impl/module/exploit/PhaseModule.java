package net.shoreline.client.impl.module.exploit;

import net.minecraft.class_1268;
import net.minecraft.class_1776;
import net.minecraft.class_1799;
import net.minecraft.class_1802;
import net.minecraft.class_2338;
import net.minecraft.class_238;
import net.minecraft.class_243;
import net.minecraft.class_259;
import net.minecraft.class_2886;
import net.minecraft.class_3532;
import net.minecraft.class_2828.class_2830;
import net.shoreline.client.api.config.Config;
import net.shoreline.client.api.config.setting.BooleanConfig;
import net.shoreline.client.api.config.setting.EnumConfig;
import net.shoreline.client.api.config.setting.NumberConfig;
import net.shoreline.client.api.event.EventStage;
import net.shoreline.client.api.event.listener.EventListener;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.RotationModule;
import net.shoreline.client.impl.event.network.PlayerUpdateEvent;
import net.shoreline.client.impl.event.network.PushOutOfBlocksEvent;
import net.shoreline.client.impl.event.world.BlockCollisionEvent;
import net.shoreline.client.init.Managers;
import net.shoreline.client.util.player.RotationUtil;
import net.shoreline.client.util.string.EnumFormatter;

public class PhaseModule extends RotationModule {
   Config<PhaseModule.PhaseMode> modeConfig;
   Config<Integer> pitchConfig;
   Config<Float> blocksConfig;
   Config<Float> distanceConfig;
   Config<Boolean> autoClipConfig;

   public PhaseModule() {
      super("Phase", "Allows player to phase through solid blocks", ModuleCategory.EXPLOITS, 1000);
      this.modeConfig = new EnumConfig("Mode", "The phase mode for clipping into blocks", PhaseModule.PhaseMode.NORMAL, PhaseModule.PhaseMode.values());
      this.pitchConfig = new NumberConfig("Pitch", "The pitch to throw pearls", 70, 85, 90, () -> {
         return this.modeConfig.getValue() == PhaseModule.PhaseMode.PEARL;
      });
      this.blocksConfig = new NumberConfig("Blocks", "The blocks distance to phase clip", 0.001F, 0.003F, 10.0F, () -> {
         return this.modeConfig.getValue() != PhaseModule.PhaseMode.PEARL;
      });
      this.distanceConfig = new NumberConfig("Distance", "The distance to phase", 0.0F, 0.2F, 10.0F, () -> {
         return this.modeConfig.getValue() != PhaseModule.PhaseMode.PEARL;
      });
      this.autoClipConfig = new BooleanConfig("AutoClip", "Automatically clips into the block", true);
   }

   public String getModuleData() {
      return EnumFormatter.formatEnum((Enum)this.modeConfig.getValue());
   }

   public void onEnable() {
      if (mc.field_1724 != null) {
         if (this.modeConfig.getValue() != PhaseModule.PhaseMode.PEARL) {
            if ((Boolean)this.autoClipConfig.getValue()) {
               double cos = Math.cos(Math.toRadians((double)(mc.field_1724.method_36454() + 90.0F)));
               double sin = Math.sin(Math.toRadians((double)(mc.field_1724.method_36454() + 90.0F)));
               mc.field_1724.method_5814(mc.field_1724.method_23317() + 1.0D * (double)(Float)this.blocksConfig.getValue() * cos + 0.0D * (double)(Float)this.blocksConfig.getValue() * sin, mc.field_1724.method_23318(), mc.field_1724.method_23321() + (1.0D * (double)(Float)this.blocksConfig.getValue() * sin - 0.0D * (double)(Float)this.blocksConfig.getValue() * cos));
            }
         } else {
            int pearlSlot = -1;
            int i = 0;

            while(true) {
               if (i < 9) {
                  class_1799 stack = mc.field_1724.method_31548().method_5438(i);
                  if (!(stack.method_7909() instanceof class_1776)) {
                     ++i;
                     continue;
                  }

                  pearlSlot = i;
               }

               if (pearlSlot == -1 || mc.field_1724.method_7357().method_7904(class_1802.field_8634)) {
                  this.disable();
                  return;
               }

               float prevYaw = mc.field_1724.method_36454();
               float prevPitch = mc.field_1724.method_36455();
               float[] rotations = RotationUtil.getRotationsTo(mc.field_1724.method_33571(), new class_243(Math.floor(mc.field_1724.method_23317()) + 0.5D, 0.0D, Math.floor(mc.field_1724.method_23321()) + 0.5D));
               this.setRotationClient(rotations[0] + 180.0F, (float)(Integer)this.pitchConfig.getValue());
               Managers.INVENTORY.setSlot(pearlSlot);
               Managers.NETWORK.sendPacket(new class_2830(mc.field_1724.method_23317(), mc.field_1724.method_23318(), mc.field_1724.method_23321(), rotations[0] + 180.0F, (float)(Integer)this.pitchConfig.getValue(), mc.field_1724.method_24828()));
               Managers.NETWORK.sendSequencedPacket((id) -> {
                  return new class_2886(class_1268.field_5808, id);
               });
               mc.field_1724.method_6104(class_1268.field_5808);
               Managers.INVENTORY.syncToClient();
               this.setRotationClient(prevYaw, prevPitch);
               this.disable();
               break;
            }
         }

      }
   }

   @EventListener
   public void onBlockCollision(BlockCollisionEvent event) {
      if (mc.field_1724 != null) {
         switch((PhaseModule.PhaseMode)this.modeConfig.getValue()) {
         case NORMAL:
            if (event.getVoxelShape() != class_259.method_1073() && event.getVoxelShape().method_1107().field_1325 > mc.field_1724.method_5829().field_1322 && mc.field_1724.method_5715()) {
               event.cancel();
               event.setVoxelShape(class_259.method_1073());
            }
            break;
         case SAND:
            event.cancel();
            event.setVoxelShape(class_259.method_1073());
            mc.field_1724.field_5960 = true;
            break;
         case CLIMB:
            if (mc.field_1724.field_5976) {
               event.cancel();
               event.setVoxelShape(class_259.method_1073());
            }

            if (mc.field_1724.field_3913.field_3903 || mc.field_1724.field_3913.field_3904 && (double)event.getPos().method_10264() > mc.field_1724.method_23318()) {
               event.cancel();
            }
         }

      }
   }

   @EventListener
   public void onPlayerUpdate(PlayerUpdateEvent event) {
      if (event.getStage() == EventStage.PRE) {
         switch((PhaseModule.PhaseMode)this.modeConfig.getValue()) {
         case NORMAL:
            if (mc.field_1724.method_5715() && this.isPhasing()) {
               float yaw = mc.field_1724.method_36454();
               mc.field_1724.method_5857(mc.field_1724.method_5829().method_989((double)(Float)this.distanceConfig.getValue() * Math.cos(Math.toRadians((double)(yaw + 90.0F))), 0.0D, (double)(Float)this.distanceConfig.getValue() * Math.sin(Math.toRadians((double)(yaw + 90.0F)))));
            }
            break;
         case SAND:
            Managers.MOVEMENT.setMotionY(0.0D);
            if (mc.method_1569()) {
               if (mc.field_1724.field_3913.field_3904) {
                  Managers.MOVEMENT.setMotionY(mc.field_1724.method_18798().field_1351 + 0.3D);
               }

               if (mc.field_1724.field_3913.field_3903) {
                  Managers.MOVEMENT.setMotionY(mc.field_1724.method_18798().field_1351 - 0.3D);
               }
            }

            mc.field_1724.field_5960 = true;
         }

      }
   }

   @EventListener
   public void onPushOutOfBlocks(PushOutOfBlocksEvent event) {
      event.cancel();
   }

   public boolean isPhasing() {
      class_238 bb = mc.field_1724.method_5829();

      for(int x = class_3532.method_15357(bb.field_1323); x < class_3532.method_15357(bb.field_1320) + 1; ++x) {
         for(int y = class_3532.method_15357(bb.field_1322); y < class_3532.method_15357(bb.field_1325) + 1; ++y) {
            for(int z = class_3532.method_15357(bb.field_1321); z < class_3532.method_15357(bb.field_1324) + 1; ++z) {
               if (mc.field_1687.method_8320(new class_2338(x, y, z)).method_51366() && bb.method_994(new class_238((double)x, (double)y, (double)z, (double)x + 1.0D, (double)y + 1.0D, (double)z + 1.0D))) {
                  return true;
               }
            }
         }
      }

      return false;
   }

   public static enum PhaseMode {
      NORMAL,
      SAND,
      CLIMB,
      PEARL;

      // $FF: synthetic method
      private static PhaseModule.PhaseMode[] $values() {
         return new PhaseModule.PhaseMode[]{NORMAL, SAND, CLIMB, PEARL};
      }
   }
}

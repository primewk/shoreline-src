package net.shoreline.client.impl.module.exploit;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import net.minecraft.class_2596;
import net.minecraft.class_2827;
import net.minecraft.class_2856;
import net.minecraft.class_6374;
import net.shoreline.client.api.config.Config;
import net.shoreline.client.api.config.setting.BooleanConfig;
import net.shoreline.client.api.config.setting.NumberConfig;
import net.shoreline.client.api.event.listener.EventListener;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.ToggleModule;
import net.shoreline.client.impl.event.RunTickEvent;
import net.shoreline.client.impl.event.network.PacketEvent;

public class FakeLatencyModule extends ToggleModule {
   Config<Float> latencyConfig = new NumberConfig("Latency", "Delay in ms to add to the client ping", 10.0F, 100.0F, 500.0F);
   Config<Boolean> transactionsConfig = new BooleanConfig("Transactions", "Handle server transaction packets", false);
   private final ConcurrentMap<class_2596<?>, Long> cachedPackets = new ConcurrentHashMap();

   public FakeLatencyModule() {
      super("FakeLatency", "Spoofs packet delays to make it appear to the server that you have a higher latency", ModuleCategory.EXPLOITS);
   }

   public void onDisable() {
      if (mc.field_1724 != null) {
         if (!this.cachedPackets.isEmpty()) {
            this.cachedPackets.forEach((packet, time) -> {
               mc.field_1724.field_3944.method_52787(packet);
            });
            this.cachedPackets.clear();
         }

      }
   }

   @EventListener
   public void onPacketOutbound(PacketEvent.Outbound event) {
      if (mc.field_1724 != null) {
         if (!mc.method_1542() && (event.getPacket() instanceof class_2827 || (event.getPacket() instanceof class_2856 || event.getPacket() instanceof class_6374) && (Boolean)this.transactionsConfig.getValue())) {
            if (this.cachedPackets.containsKey(event.getPacket())) {
               this.cachedPackets.remove(event.getPacket());
               return;
            }

            this.cachedPackets.put(event.getPacket(), System.currentTimeMillis());
            event.cancel();
         }

      }
   }

   @EventListener
   public void onTick(RunTickEvent event) {
      this.cachedPackets.forEach((packet, time) -> {
         long elapsed = System.currentTimeMillis() - time;
         if ((float)elapsed > (Float)this.latencyConfig.getValue()) {
            mc.field_1724.field_3944.method_52787(packet);
            this.cachedPackets.remove(packet);
         }

      });
   }
}

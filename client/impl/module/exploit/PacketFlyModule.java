package net.shoreline.client.impl.module.exploit;

import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.TimeUnit;
import net.minecraft.class_241;
import net.minecraft.class_243;
import net.minecraft.class_2596;
import net.minecraft.class_2708;
import net.minecraft.class_2709;
import net.minecraft.class_2793;
import net.minecraft.class_2828;
import net.minecraft.class_418;
import net.minecraft.class_434;
import net.minecraft.class_2828.class_2829;
import net.shoreline.client.api.config.Config;
import net.shoreline.client.api.config.setting.BooleanConfig;
import net.shoreline.client.api.config.setting.EnumConfig;
import net.shoreline.client.api.config.setting.NumberConfig;
import net.shoreline.client.api.event.EventStage;
import net.shoreline.client.api.event.listener.EventListener;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.ToggleModule;
import net.shoreline.client.impl.event.ScreenOpenEvent;
import net.shoreline.client.impl.event.TickEvent;
import net.shoreline.client.impl.event.entity.player.PlayerMoveEvent;
import net.shoreline.client.impl.event.network.DisconnectEvent;
import net.shoreline.client.impl.event.network.PacketEvent;
import net.shoreline.client.impl.event.network.PlayerUpdateEvent;
import net.shoreline.client.impl.event.network.PushOutOfBlocksEvent;
import net.shoreline.client.init.Managers;
import net.shoreline.client.mixin.accessor.AccessorPlayerPositionLookS2CPacket;
import net.shoreline.client.util.Globals;
import net.shoreline.client.util.math.position.TimedVec3d;
import net.shoreline.client.util.string.EnumFormatter;

public class PacketFlyModule extends ToggleModule {
   Config<PacketFlyModule.FlyMode> modeConfig;
   Config<Float> factorConfig;
   Config<Float> reductionConfig;
   Config<PacketFlyModule.Phase> phaseConfig;
   Config<PacketFlyModule.Type> typeConfig;
   Config<PacketFlyModule.Limit> limitConfig;
   Config<Boolean> verticalLimitConfig;
   Config<Boolean> concealConfig;
   Config<Boolean> limitJitterConfig;
   Config<Boolean> slowConfig;
   Config<Boolean> antiKickConfig;
   private int limitTicks;
   private boolean limitSpeed;
   private int antiKickTicks;
   private int teleportId;
   private boolean concealTeleportPacket;
   private static final float CONCEAL_SPEED = 0.0624F;
   private static final double MOVE_FACTOR = 1.0D / Math.sqrt(2.0D);
   private final Set<class_2828> clientPositionPackets;
   private final ConcurrentMap<Integer, TimedVec3d> serverPositionPredictions;

   public PacketFlyModule() {
      super("PacketFly", "Allows player to fly by abusing 1.9+ packet exploit", ModuleCategory.EXPLOITS);
      this.modeConfig = new EnumConfig("Mode", "The packetfly mode for spoofing packets", PacketFlyModule.FlyMode.FAST, PacketFlyModule.FlyMode.values());
      this.factorConfig = new NumberConfig("Factor", "The tick factor when applying packets", 1.0F, 1.0F, 10.0F, () -> {
         return this.modeConfig.getValue() == PacketFlyModule.FlyMode.FACTOR;
      });
      this.reductionConfig = new NumberConfig("Reduction", "The reduction vertical factor", 0.0F, 0.0F, 2.5F);
      this.phaseConfig = new EnumConfig("Phase", "The phase/noclip type for moving through blocks", PacketFlyModule.Phase.FULL, PacketFlyModule.Phase.values());
      this.typeConfig = new EnumConfig("Type", "The out of bounds packet type", PacketFlyModule.Type.DOWN, PacketFlyModule.Type.values());
      this.limitConfig = new EnumConfig("Limit", "The horizontal speed limit", PacketFlyModule.Limit.OFF, PacketFlyModule.Limit.values());
      this.verticalLimitConfig = new BooleanConfig("Limit-Vertical", "Slows down when moving vertically", false);
      this.concealConfig = new BooleanConfig("Conceal", "Conceals the out of bounds packet", false);
      this.limitJitterConfig = new BooleanConfig("LimitJitter", "Prevents the jitter when flying", true);
      this.slowConfig = new BooleanConfig("Conceal-Slow", "Slows down the speed to the concealed speed", false);
      this.antiKickConfig = new BooleanConfig("AntiKick", "Prevents the vanilla anticheat from kicking for flying", true);
      this.clientPositionPackets = new HashSet();
      this.serverPositionPredictions = new ConcurrentHashMap();
   }

   public String getModuleData() {
      return EnumFormatter.formatEnum((Enum)this.modeConfig.getValue());
   }

   public void onDisable() {
      if (mc.field_1724 != null) {
         this.serverPositionPredictions.clear();
         this.teleportId = 0;
         mc.field_1724.field_5960 = false;
      }
   }

   @EventListener
   public void onDisconnect(DisconnectEvent event) {
      this.disable();
   }

   @EventListener
   public void onScreenOpen(ScreenOpenEvent event) {
      if (event.getScreen() instanceof class_418) {
         this.disable();
      }

   }

   @EventListener
   public void onPacketOutbound(PacketEvent.Outbound event) {
      class_2596 var3 = event.getPacket();
      if (var3 instanceof class_2828) {
         class_2828 packet = (class_2828)var3;
         if (!this.clientPositionPackets.contains(packet) && !mc.method_1542()) {
            event.cancel();
         }
      }

   }

   @EventListener
   public void onPacketInbound(PacketEvent.Inbound event) {
      if (mc.field_1724 != null && mc.field_1687 != null && !mc.method_1542() && !(mc.field_1755 instanceof class_434)) {
         class_2596 var3 = event.getPacket();
         if (var3 instanceof class_2708) {
            class_2708 packet = (class_2708)var3;
            TimedVec3d predictPos = (TimedVec3d)this.serverPositionPredictions.remove(packet.method_11737());
            if (predictPos != null && predictPos.method_10216() == packet.method_11734() && predictPos.method_10214() == packet.method_11735() && predictPos.method_10215() == packet.method_11738()) {
               if (this.modeConfig.getValue() != PacketFlyModule.FlyMode.SETBACK) {
                  event.cancel();
               }

               Managers.NETWORK.sendPacket(new class_2793(packet.method_11737()));
               return;
            }

            if ((Boolean)this.concealConfig.getValue() && predictPos != null && (predictPos.method_10216() != packet.method_11734() || predictPos.method_10214() != packet.method_11735() || predictPos.method_10215() != packet.method_11738())) {
               this.concealTeleportPacket = true;
            }

            packet.method_11733().remove(class_2709.field_12397);
            packet.method_11733().remove(class_2709.field_12401);
            ((AccessorPlayerPositionLookS2CPacket)packet).setYaw(mc.field_1724.method_36454());
            ((AccessorPlayerPositionLookS2CPacket)packet).setPitch(mc.field_1724.method_36455());
            Managers.NETWORK.sendPacket(new class_2793(packet.method_11737()));
            this.teleportId = packet.method_11737();
         }

      }
   }

   @EventListener
   public void onPlayerUpdate(PlayerUpdateEvent event) {
      if (event.getStage() == EventStage.PRE) {
         if (this.modeConfig.getValue() != PacketFlyModule.FlyMode.SETBACK && this.teleportId == 0 && !mc.method_1542()) {
            if (this.checkAntiKick(4)) {
               class_243 playerPos = mc.field_1724.method_19538();
               this.sendMovePacket(playerPos);
               if (this.concealTeleportPacket && (Boolean)this.concealConfig.getValue()) {
                  this.sendMovePacket(this.getConcealVec(playerPos));
                  this.concealTeleportPacket = false;
               }

               this.sendMovePacket(((PacketFlyModule.Type)this.typeConfig.getValue()).getOutOfBoundsVec3d(playerPos));
               if (this.modeConfig.getValue() != PacketFlyModule.FlyMode.SETBACK) {
                  this.serverPositionPredictions.put(++this.teleportId, new TimedVec3d(playerPos, System.currentTimeMillis()));
                  if ((Boolean)this.limitJitterConfig.getValue()) {
                     Managers.NETWORK.sendPacket(new class_2793(this.teleportId));
                  }
               }
            }

         } else {
            boolean blockPhased = this.isBlockPhased();
            float moveSpeed = !(Boolean)this.slowConfig.getValue() && (this.phaseConfig.getValue() != PacketFlyModule.Phase.FULL || !blockPhased) ? this.getLimitedSpeed() : 0.031F;
            boolean antiKick = false;
            double motionY;
            if (mc.field_1690.field_1903.method_1434()) {
               if ((Boolean)this.antiKickConfig.getValue() && !blockPhased) {
                  antiKick = this.checkAntiKick(this.modeConfig.getValue() == PacketFlyModule.FlyMode.SETBACK ? 10 : 20) && mc.field_1724.field_6250 == 0.0F && mc.field_1724.field_6212 == 0.0F;
                  motionY = antiKick ? -0.032D : 0.06239999830722809D;
                  if ((Boolean)this.verticalLimitConfig.getValue() && (mc.field_1724.field_6250 != 0.0F || mc.field_1724.field_6212 != 0.0F)) {
                     moveSpeed = (float)((double)moveSpeed * MOVE_FACTOR);
                     motionY *= MOVE_FACTOR;
                  }
               } else {
                  motionY = 0.06239999830722809D;
                  if ((Boolean)this.verticalLimitConfig.getValue() && (mc.field_1724.field_6250 != 0.0F || mc.field_1724.field_6212 != 0.0F)) {
                     moveSpeed = (float)((double)moveSpeed * MOVE_FACTOR);
                     motionY *= MOVE_FACTOR;
                  }
               }
            } else if (mc.field_1690.field_1832.method_1434()) {
               motionY = -0.06239999830722809D;
               if ((Boolean)this.verticalLimitConfig.getValue() && (mc.field_1724.field_6250 != 0.0F || mc.field_1724.field_6212 != 0.0F)) {
                  moveSpeed = (float)((double)moveSpeed * MOVE_FACTOR);
                  motionY *= MOVE_FACTOR;
               }
            } else if (!blockPhased && (Boolean)this.antiKickConfig.getValue()) {
               antiKick = this.checkAntiKick(4) && mc.field_1724.field_6250 == 0.0F && mc.field_1724.field_6212 == 0.0F;
               motionY = antiKick ? -0.04D : 0.0D;
            } else {
               motionY = 0.0D;
            }

            if (this.phaseConfig.getValue() == PacketFlyModule.Phase.FULL && blockPhased && motionY != 0.0D) {
               motionY /= 2.5D + (double)(Float)this.reductionConfig.getValue();
            }

            int i = 1;

            for(class_241 motion = this.handleFlightMotion(moveSpeed); i <= (this.modeConfig.getValue() == PacketFlyModule.FlyMode.FACTOR ? ((Float)this.factorConfig.getValue()).intValue() : 1); ++i) {
               double motionX = (double)(motion.field_1343 * (float)i);
               double motionZ = (double)(motion.field_1342 * (float)i);
               if (!antiKick) {
                  motionY *= (double)i;
               }

               mc.field_1724.method_18800(motionX, motionY, motionZ);
               if (!mc.method_1542()) {
                  class_243 pos = mc.field_1724.method_19538();
                  class_243 move = pos.method_1031(motionX, motionY, motionZ);
                  this.sendMovePacket(move);
                  if (this.concealTeleportPacket && (Boolean)this.concealConfig.getValue()) {
                     this.sendMovePacket(this.getConcealVec(move));
                     this.concealTeleportPacket = false;
                  }

                  this.sendMovePacket(((PacketFlyModule.Type)this.typeConfig.getValue()).getOutOfBoundsVec3d(move));
                  if (this.modeConfig.getValue() != PacketFlyModule.FlyMode.SETBACK) {
                     this.serverPositionPredictions.put(++this.teleportId, new TimedVec3d(move, System.currentTimeMillis()));
                     Managers.NETWORK.sendPacket(new class_2793(this.teleportId));
                  }
               }
            }

         }
      }
   }

   @EventListener
   public void onPlayerMove(PlayerMoveEvent event) {
      if (mc.field_1724 != null) {
         class_243 move = mc.field_1724.method_18798();
         event.setX(move.field_1352);
         event.setY(move.field_1351);
         event.setZ(move.field_1350);
         if (this.phaseConfig.getValue() != PacketFlyModule.Phase.OFF) {
            mc.field_1724.field_5960 = true;
         }

         event.cancel();
      }
   }

   @EventListener
   public void onTick(TickEvent event) {
      if (event.getStage() == EventStage.PRE) {
         this.serverPositionPredictions.entrySet().removeIf((pos) -> {
            TimedVec3d timeVec = (TimedVec3d)pos.getValue();
            long elapsed = System.currentTimeMillis() - timeVec.time();
            return elapsed > TimeUnit.SECONDS.toMillis(30L);
         });
      }
   }

   @EventListener
   public void onPushOutOfBlocks(PushOutOfBlocksEvent event) {
      event.cancel();
   }

   private void sendMovePacket(class_243 vec) {
      class_2828 packet = new class_2829(vec.method_10216(), vec.method_10214(), vec.method_10215(), mc.field_1724.method_24828());
      Managers.NETWORK.sendPacket(packet);
      this.clientPositionPackets.add(packet);
   }

   private class_243 getConcealVec(class_243 vec) {
      return new class_243(vec.field_1352, RANDOM.nextDouble(278.0D, 295.0D) * (vec.field_1351 > 127.5D ? -1.0D : 1.0D), vec.field_1350);
   }

   private float getLimitedSpeed() {
      float var10000;
      switch((PacketFlyModule.Limit)this.limitConfig.getValue()) {
      case TICK:
         var10000 = 0.1899F;
         break;
      case SPEED:
         if (!this.limitSpeed) {
            if (this.checkLimitSpeed(7)) {
               this.limitSpeed = true;
            }

            var10000 = 0.253F;
         } else {
            if (this.checkLimitSpeed(7)) {
               this.limitSpeed = false;
            }

            var10000 = 0.198F;
         }
         break;
      case BOTH:
         if (!this.limitSpeed) {
            if (this.checkLimitSpeed(1)) {
               this.limitSpeed = true;
            }

            var10000 = 0.256F;
         } else {
            if (this.checkLimitSpeed(1)) {
               this.limitSpeed = false;
            }

            var10000 = 0.1899F;
         }
         break;
      case OFF:
         var10000 = 0.26F;
         break;
      default:
         throw new IncompatibleClassChangeError();
      }

      return var10000;
   }

   private class_241 handleFlightMotion(float speed) {
      float forward = mc.field_1724.field_3913.field_3905;
      float strafe = mc.field_1724.field_3913.field_3907;
      float yaw = mc.field_1724.field_5982 + (mc.field_1724.method_36454() - mc.field_1724.field_5982) * mc.method_1488();
      if (forward == 0.0F && strafe == 0.0F) {
         return class_241.field_1340;
      } else {
         if (forward != 0.0F) {
            if (strafe >= 1.0F) {
               yaw += forward > 0.0F ? -45.0F : 45.0F;
               strafe = 0.0F;
            } else if (strafe <= -1.0F) {
               yaw += forward > 0.0F ? 45.0F : -45.0F;
               strafe = 0.0F;
            }

            if (forward > 0.0F) {
               forward = 1.0F;
            } else if (forward < 0.0F) {
               forward = -1.0F;
            }
         }

         float rx = (float)Math.cos(Math.toRadians((double)yaw));
         float rz = (float)(-Math.sin(Math.toRadians((double)yaw)));
         return new class_241(forward * speed * rz + strafe * speed * rx, forward * speed * rx - strafe * speed * rz);
      }
   }

   private boolean checkAntiKick(int ticks) {
      if (++this.antiKickTicks >= ticks) {
         this.antiKickTicks = 0;
         return true;
      } else {
         return false;
      }
   }

   private boolean checkLimitSpeed(int ticks) {
      if (++this.limitTicks >= ticks) {
         this.limitTicks = 0;
         return true;
      } else {
         return false;
      }
   }

   private boolean isBlockPhased() {
      return !mc.field_1687.method_8587(mc.field_1724, mc.field_1724.method_5829().method_1009(-0.0625D, -0.0625D, -0.0625D));
   }

   public static enum FlyMode {
      FACTOR,
      FAST,
      SETBACK;

      // $FF: synthetic method
      private static PacketFlyModule.FlyMode[] $values() {
         return new PacketFlyModule.FlyMode[]{FACTOR, FAST, SETBACK};
      }
   }

   public static enum Phase {
      FULL,
      SEMI,
      OFF;

      // $FF: synthetic method
      private static PacketFlyModule.Phase[] $values() {
         return new PacketFlyModule.Phase[]{FULL, SEMI, OFF};
      }
   }

   public static enum Type {
      UP {
         public class_243 getOutOfBoundsVec3d(class_243 vec) {
            return vec.method_1023(0.0D, 1337.0D, 0.0D);
         }
      },
      DOWN {
         public class_243 getOutOfBoundsVec3d(class_243 vec) {
            return vec.method_1031(0.0D, 1337.0D, 0.0D);
         }
      },
      PRESERVE {
         public class_243 getOutOfBoundsVec3d(class_243 vec) {
            return vec.method_1031(Globals.RANDOM.nextDouble(100000.0D), 0.0D, Globals.RANDOM.nextDouble(100000.0D));
         }
      },
      PRESERVE_BOUNDED {
         public class_243 getOutOfBoundsVec3d(class_243 vec) {
            return class_243.field_1353;
         }
      },
      BOUNDED {
         public class_243 getOutOfBoundsVec3d(class_243 vec) {
            return new class_243(vec.field_1352, -vec.field_1351 + (vec.field_1351 < 127.5D ? 255.0D : 0.0D), vec.field_1350);
         }
      },
      CONCEAL {
         public class_243 getOutOfBoundsVec3d(class_243 vec) {
            return vec.method_1031(Globals.RANDOM.nextDouble(-100000.0D, 100000.0D), 2.0D, Globals.RANDOM.nextDouble(-100000.0D, 100000.0D));
         }
      },
      LIMIT {
         public class_243 getOutOfBoundsVec3d(class_243 vec) {
            return vec.method_1031(Globals.RANDOM.nextDouble(-50.0D, 50.0D), Globals.RANDOM.nextDouble(50.0D, 80.0D) * (Globals.RANDOM.nextBoolean() ? 1.0D : -1.0D), Globals.RANDOM.nextDouble(-50.0D, 50.0D));
         }
      },
      LIMIT_JITTER {
         public class_243 getOutOfBoundsVec3d(class_243 vec) {
            return vec.method_1031(Globals.RANDOM.nextDouble(-10.0D, 10.0D), Globals.RANDOM.nextDouble(80.0D, 100.0D) * (Globals.RANDOM.nextBoolean() ? 1.0D : -1.0D), Globals.RANDOM.nextDouble(-10.0D, 10.0D));
         }
      };

      public abstract class_243 getOutOfBoundsVec3d(class_243 var1);

      // $FF: synthetic method
      private static PacketFlyModule.Type[] $values() {
         return new PacketFlyModule.Type[]{UP, DOWN, PRESERVE, PRESERVE_BOUNDED, BOUNDED, CONCEAL, LIMIT, LIMIT_JITTER};
      }
   }

   public static enum Limit {
      TICK,
      SPEED,
      BOTH,
      OFF;

      // $FF: synthetic method
      private static PacketFlyModule.Limit[] $values() {
         return new PacketFlyModule.Limit[]{TICK, SPEED, BOTH, OFF};
      }
   }
}
